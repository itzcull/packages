// Generated by CodiumAI

import { HTTP_SCHEME_REGEX, HTTPS_SCHEME_REGEX, VALID_WEBSITE_URL_REGEX } from './regex'

describe('VALID_WEBSITE_URL_REGEX', () => {
  // Valid URL with http scheme
  it('should return true when a valid URL with http scheme is provided', () => {
    const url = 'http://www.example.com'
    expect(VALID_WEBSITE_URL_REGEX.test(url)).toBe(true)
  })

  // Valid URL with https scheme
  it('should return true when a valid URL with https scheme is provided', () => {
    const url = 'https://www.example.com'
    expect(VALID_WEBSITE_URL_REGEX.test(url)).toBe(true)
  })

  // Valid URL without scheme
  it('should return true when a valid URL without scheme is provided', () => {
    const url = 'www.example.com'
    expect(VALID_WEBSITE_URL_REGEX.test(url)).toBe(true)
  })

  // Invalid URL with missing top-level domain
  // To be really rigorous, we could import a list of valid top-level domains
  // But I think that's overkill, the user's can make these mistakes for all we care
  it('should return true, even though the top-level domain is invalid', () => {
    const url = 'http://www.example'
    expect(VALID_WEBSITE_URL_REGEX.test(url)).toBe(true)
  })

  // Invalid URL with invalid characters
  it('should return false when an invalid URL with invalid characters is provided', () => {
    const url = 'http://www.example.com@'
    expect(VALID_WEBSITE_URL_REGEX.test(url)).toBe(false)
  })
})

// Generated by CodiumAI

describe('HTTPS_SCHEME_REGEX', () => {
  // Valid https url
  it('should match when given a valid https url', () => {
    const url = 'https://www.example.com'
    expect(HTTPS_SCHEME_REGEX.test(url)).toBe(true)
  })

  // https url with query parameters
  it('should match when given a https url with query parameters', () => {
    const url = 'https://www.example.com?param1=value1&param2=value2'
    expect(HTTPS_SCHEME_REGEX.test(url)).toBe(true)
  })

  // https url with fragment identifier
  it('should match when given a https url with fragment identifier', () => {
    const url = 'https://www.example.com#section1'
    expect(HTTPS_SCHEME_REGEX.test(url)).toBe(true)
  })

  // Invalid url with http scheme
  it('should not match when given an invalid url with http scheme', () => {
    const url = 'http://www.example.com'
    expect(HTTPS_SCHEME_REGEX.test(url)).toBe(false)
  })

  // Invalid url with ftp scheme
  it('should not match when given an invalid url with ftp scheme', () => {
    const url = 'ftp://www.example.com'
    expect(HTTPS_SCHEME_REGEX.test(url)).toBe(false)
  })

  // Invalid url with missing colon after scheme
  it('should not match when given an invalid url with missing colon after scheme', () => {
    const url = 'https//www.example.com'
    expect(HTTPS_SCHEME_REGEX.test(url)).toBe(false)
  })
})

// Generated by CodiumAI

describe('HTTP_SCHEME_REGEX', () => {
  // HTTP_SCHEME_REGEX matches "http://example.com"
  it('should match when given "http://example.com"', () => {
    expect(HTTP_SCHEME_REGEX.test('http://example.com')).toBe(true)
  })

  // HTTP_SCHEME_REGEX matches "http://localhost:3000"
  it('should match when given "http://localhost:3000"', () => {
    expect(HTTP_SCHEME_REGEX.test('http://localhost:3000')).toBe(true)
  })

  // HTTP_SCHEME_REGEX matches "http://127.0.0.1"
  it('should match when given "http://127.0.0.1"', () => {
    expect(HTTP_SCHEME_REGEX.test('http://127.0.0.1')).toBe(true)
  })

  // HTTP_SCHEME_REGEX does not match "https://example.com"
  it('should not match when given "https://example.com"', () => {
    expect(HTTP_SCHEME_REGEX.test('https://example.com')).toBe(false)
  })

  // HTTP_SCHEME_REGEX does not match "ftp://example.com"
  it('should not match when given "ftp://example.com"', () => {
    expect(HTTP_SCHEME_REGEX.test('ftp://example.com')).toBe(false)
  })

  // HTTP_SCHEME_REGEX does not match "http:/example.com"
  it('should not match when given "http:/example.com"', () => {
    expect(HTTP_SCHEME_REGEX.test('http:/example.com')).toBe(false)
  })
})
